package Soket.test;

import java.io.BufferedWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.view.Window;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class SoketChat extends Activity implements OnClickListener {
    private final static String BR=//改行
        System.getProperty("line.separator");
    private final static String IP=//IPアドレスの指定
        "172.22.38.37";//
    
    private SoketChat current;   //カレント
    private TextView lblReceive;//受信ラベル
    private EditText edtSend;   //送信エディットテキスト
    private Button   btnSend;   //送信ボタン
    
    private Socket       socket; //ソケット
    private InputStream  in;     //入力ストリーム
    private OutputStream out;    //出力ストリーム  
    
    private final Handler handler=new Handler();//ハンドラ
    private String txtReceive;//受信テキスト    
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
        current=this;
        
        //レイアウトの生成
        RelativeLayout layout=new RelativeLayout(this);
        layout.setBackgroundColor(Color.rgb(255,255,255));
        setContentView(layout);  
        
        //受信ラベルの生成
        lblReceive=new TextView(this);
        lblReceive.setId(1);
        lblReceive.setText("");
        lblReceive.setTextSize(16.0f);                  
        lblReceive.setTextColor(Color.rgb(0,0,0));
        RelativeLayout.LayoutParams param1=
            new RelativeLayout.LayoutParams(320,400);
        lblReceive.setLayoutParams(param1);
        layout.addView(lblReceive);

        //送信エディットテキストの生成
        edtSend=new EditText(this);
        edtSend.setId(2);
        edtSend.setText("",TextView.BufferType.NORMAL);
        RelativeLayout.LayoutParams param2=
            new RelativeLayout.LayoutParams(200,50);
        param2.addRule(RelativeLayout.BELOW,1);
        edtSend.setLayoutParams(param2);
        layout.addView(edtSend);        
        
        //送信ボタンの生成
        btnSend=new Button(this);
        btnSend.setText("送信");
        btnSend.setOnClickListener(this);
        RelativeLayout.LayoutParams param3=
            new RelativeLayout.LayoutParams(200,50);
        param3.addRule(RelativeLayout.BELOW,1);
        param3.addRule(RelativeLayout.RIGHT_OF,2);
        btnSend.setLayoutParams(param3);
        layout.addView(btnSend);

        //スレッドの生成
        Thread cThread =new Thread(){public void run() {
            try {
                connect(IP,6001);
            } catch (Exception e) {
            }
        }}    ; 
        cThread.start(); 


	}
	//接続
    private void connect(String ip,int port) {
        int size;
        byte[] w =new byte[10240];        
        txtReceive="";
        try {
            //ソケット接続
            socket=new Socket(ip,port);
            in =socket.getInputStream();
            out=socket.getOutputStream();
            
            //受信ループ
            while (socket!=null && socket.isConnected()) {
                //データの受信
                size=in.read(w);
                if (size<=0) continue;
                txtReceive=new String(w,0,size,"UTF-8");

                //ハンドラによるユーザーインタフェース操作
                handler.post(new Runnable(){
                    public void run() {
                        //ラベルへの文字列追加
                        lblReceive.setText(
                            lblReceive.getText()+txtReceive+BR);
                    }
                });
            }
        } catch (Exception e) {
            handler.post(new Runnable(){
                public void run() {
                	SoketChat.showDialog(current,"","通信エラーです");
                }
            });
        }
    }    

    //ボタンクリックイベントの処理
    public void onClick(View v) {
        if (v==btnSend) {
            try {
                //データの送信
                if (socket!=null && socket.isConnected()) {
                    PrintWriter out = new PrintWriter(new BufferedWriter(
    						new OutputStreamWriter(socket.getOutputStream())), true);
    				out.println(edtSend.getText().toString());
                    out.flush();
                    edtSend.setText("",TextView.BufferType.NORMAL);
                }
            } catch (Exception e) {
                handler.post(new Runnable(){
                    public void run() {
                    	SoketChat.showDialog(current,"","通信エラーです");
                    }
                });
            }           
        }
    }    
    
    //ダイアログの表示
    public static void showDialog(final Activity activity,String title,String text) {
        AlertDialog.Builder ad=new AlertDialog.Builder(activity);
        ad.setTitle(title);
        ad.setMessage(text);
        ad.setPositiveButton("OK",new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog,int whichButton) {
                activity.setResult(Activity.RESULT_OK);
            }
        });
        ad.create();
        ad.show();
    }
}
